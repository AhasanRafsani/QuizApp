{"version":3,"file":"static/js/7.2ef795ce.chunk.js","mappings":"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","sources":["json/question.tsx","component/Question.tsx","component/Exam.tsx"],"sourcesContent":["\r\n\r\nexport const multipleChoice = \"multipleChoice\";\r\nexport const fillInTheBlank = \"fillInTheBlank\";\r\nexport const multiSelect = \"multiSelect\";\r\nexport const trueFalse = \" trueFalse\";\r\nexport const followingMatch = \"followingMatch\";\r\n\r\n\r\nexport interface InitQuestion{\r\n\r\n    id:number;\r\n    type:string,\r\n    title:string,\r\n    options:string[],\r\n    ans:string[]\r\n    matchAns?:string[],\r\n    lang:string\r\n    \r\n}\r\n\r\nexport const questionList: InitQuestion[] = [\r\n\r\n    {\r\n        id:1,\r\n        type: multipleChoice,\r\n        title:\"React is based on ?\",\r\n        options:[ \"Module\" , \"Service\" , \"Component\",\"Microservice\"],\r\n        ans:[\"Component\"],\r\n        lang:\"React\"\r\n\r\n    },\r\n\r\n    {\r\n        id:2,\r\n        type:fillInTheBlank  ,\r\n        title:\" How many number of elements a valid react component return  ______ ?\",\r\n        options:[\"1\",\"4\",\"2\",\"3\"],\r\n        ans:[\"1\"],\r\n        lang:\"React\"\r\n\r\n    },\r\n\r\n    {\r\n        id:3,\r\n        type: multiSelect,\r\n        title:\"Props are other components ?\" ,\r\n        options:[\"Injected\",\"Methods\",\"Props\",\"State\"],\r\n        ans:[\"Injected\",\"Methods\"],\r\n        lang:\"React\"\r\n\r\n    },\r\n    {\r\n        id:4,\r\n        type: followingMatch ,\r\n        title:\"Match the following\",\r\n        options:[\"js\",\"ts\"],\r\n        matchAns:[\"react\",\"angular\"],\r\n        ans:[\"js->react\",\"ts->angular\"],\r\n        lang:\"React\"\r\n\r\n    },\r\n    {\r\n        id:5,\r\n        type: trueFalse ,\r\n        title:\"Does React.js creact a VIRTUAL DOM in the memory?\",\r\n        options:[\"True\",\"False\"],\r\n        ans:[\"True\"],\r\n        lang:\"React\"\r\n\r\n    },\r\n    {\r\n        id:6,\r\n        type: multipleChoice  ,\r\n        title:\"CSS stands for ?\" ,\r\n        options:[\"Cascade style sheets\",\"color and style sheet\",\"Cascading style sheets\",\"None of the above\"],\r\n        ans:[\"Cascading style sheets\"],\r\n        lang:\"HTML & CSS\"\r\n\r\n    },\r\n    {\r\n        id:7,\r\n        type: fillInTheBlank,\r\n        title:\"In css what does h1 can be called as _____?\" ,\r\n        options:[\"selector\",\"Attribute\",\"value\",\"Tag\"],\r\n        ans:[\"selector\"],\r\n        lang:\"HTML & CSS\"\r\n\r\n    },\r\n    {\r\n        id:8,\r\n        type: multiSelect ,\r\n        title:\"What other tag makes text bold ?\" ,\r\n        options:[\"<fat>\",\"<strong>\",\"<black>\",\"<b>\"],\r\n        ans:[\"<strong>\",\"<b>\"],\r\n        lang:\"HTML & CSS\"\r\n\r\n    },\r\n    {\r\n        id:9,\r\n        type: trueFalse ,\r\n        title:\"Display a photo in a Html page using <img/> ?\" ,\r\n        options:[\"True\",\"False\"],\r\n        ans:[\"True\"],\r\n        lang:\"HTML & CSS\"\r\n\r\n    },\r\n    {\r\n        id:10,\r\n        type: multipleChoice,\r\n        title:\"What should be the first tag in any HTML document ?\" ,\r\n        options:[\"head\",\"title\",\"html\",\"document\"],\r\n        ans:[\"html\"],\r\n        lang:\"HTML & CSS\"\r\n\r\n    },\r\n\r\n\r\n];\r\n\r\nexport const getQuestionByLang = (lang:string):InitQuestion[] => {\r\n    const result = questionList.filter((q)=>q.lang===lang);\r\n\r\n    return result;\r\n}","import React from \"react\";\r\nimport {multipleChoice,\r\n       fillInTheBlank,\r\n       multiSelect,\r\n       trueFalse,\r\n       followingMatch,\r\n       InitQuestion,\r\n       } from \"../json/question\";\r\n\r\nimport {FormControl,FormControlLabel,Radio,Checkbox,Box,Typography,RadioGroup ,Table,TableBody,TableRow,TableCell} from \"@mui/material\"\r\ninterface Iprop{\r\n    currentQ:InitQuestion,\r\n    handleOptionPick(option:string,check?:boolean):void,\r\n    isChecked(option:string):boolean\r\n    \r\n} \r\n\r\nconst Question:React.FC<Iprop> = ({currentQ , handleOptionPick, isChecked})=>{\r\n\r\n    return(\r\n     <>\r\n     {\r\n        currentQ ? ( <Box>\r\n\r\n                    <Typography variant=\"h6\">{ currentQ.title }</Typography>\r\n                    \r\n                    {\r\n                       [multipleChoice,fillInTheBlank,trueFalse].includes(currentQ.type) &&\r\n                       <FormControl>\r\n\r\n                          <RadioGroup name={currentQ.id.toString()} onChange={ (e)=>handleOptionPick(e.target.value) }  >\r\n                           {\r\n                               currentQ.options.map((option,index)=>(\r\n                                   <FormControlLabel key={index} label={option} value={option} control={ <Radio  checked = { isChecked(option) }/> } />\r\n                               ))\r\n                           }\r\n                                                     \r\n                          </RadioGroup>\r\n                      </FormControl>\r\n                    }\r\n\r\n                    {\r\n\r\n                    multiSelect===currentQ.type &&\r\n                      <FormControl>\r\n                          {currentQ.options.map((option,index)=>(\r\n                              <FormControlLabel key={index} label={option} control={<Checkbox checked={isChecked(option)} onChange={(e)=>handleOptionPick(option,e.target.checked)} />}/>\r\n                          ))}\r\n                      </FormControl>\r\n                         \r\n                    }\r\n\r\n                    {\r\n\r\n                        followingMatch===currentQ.type && \r\n\r\n                        <Table>\r\n                            <TableBody>\r\n                                <TableRow>\r\n                                    <TableCell></TableCell>\r\n                                     {\r\n                                         currentQ.matchAns?.map((ans,index)=>(\r\n                                             <TableCell key={index}>{ans}</TableCell>\r\n                                         ))\r\n                                     }\r\n                                 </TableRow>\r\n\r\n                        {\r\n                            currentQ.options.map((op,index)=>(\r\n                                <TableRow key={index}>\r\n                                    <TableCell>{op}</TableCell>\r\n                                        {\r\n                                          currentQ.matchAns?.map((ans)=>(\r\n\r\n                                                <TableCell key={ans}>\r\n\r\n                                                    <input type=\"radio\" name={op} value={op} onChange={(e)=>handleOptionPick(`${op} -> ${e.target.value}`)}/>\r\n                                                            \r\n                                                 </TableCell>\r\n                                                        \r\n                                                    ))\r\n                                                }\r\n\r\n\r\n\r\n                                </TableRow>    \r\n\r\n                            ))\r\n                        }\r\n                             \r\n                            </TableBody>\r\n                        </Table>\r\n\r\n                    }\r\n                    </Box> ) : \r\n                   \r\n                   <Typography>No Question</Typography>\r\n     }\r\n     </>\r\n\r\n    );\r\n\r\n}\r\nexport default Question;","import React ,{useState} from \"react\";\r\nimport {InitUser} from \"./Home\";\r\nimport {useLocation,useHistory} from \"react-router-dom\"\r\nimport {Button,Typography,Container,Paper,Box,Grid} from \"@mui/material\"\r\nimport Question from \"./Question\";\r\n\r\nimport {multipleChoice,\r\n    fillInTheBlank,\r\n    multiSelect,\r\n    trueFalse,\r\n    followingMatch,\r\n    InitQuestion,\r\n    getQuestionByLang\r\n    } from \"../json/question\";\r\n\r\ninterface InitAns {\r\n    id:number,\r\n    answer:string[]\r\n};\r\n\r\nconst Exam:React.FC = ()=>{\r\n\r\n    const {state}= useLocation<InitUser>();\r\n    const history = useHistory();\r\n\r\n    const questionByLang:InitQuestion[] = getQuestionByLang(state.lang);\r\n    const [questionNo,setQuestionNo] = useState<number>(0);\r\n    const currentQ:InitQuestion = questionByLang[questionNo];\r\n\r\n    const [ ansList, setAnsList] = useState<InitAns[]>([]);\r\n    \r\n    \r\n    const getQuestionNo= (index:number):void=>{\r\n          setQuestionNo(index);\r\n    }\r\n    //console.log(questionByLang);\r\n    //console.log(state);\r\n    \r\n    const handleOptionPick =(option:string ,check?:boolean)=>{\r\n\r\n       const find = ansList.find((ans)=>ans.id===currentQ.id);\r\n\r\n       if(find){\r\n                 if([multipleChoice,fillInTheBlank,trueFalse].includes(currentQ.type)){\r\n                     const _ansList = ansList.map((a)=>{\r\n                         if(a.id === currentQ.id){\r\n                             a={id:currentQ.id,answer:[option]}\r\n                         }\r\n                         return a;\r\n                     })\r\n                     setAnsList(_ansList)\r\n                     return;\r\n                 }\r\n                 if( multiSelect===currentQ.type) {\r\n                     const _ansList = ansList.map((a)=>{\r\n                         if(a.id===currentQ.id){\r\n                            if(check){\r\n                                a={id:currentQ.id,answer:[...a.answer , option]}\r\n                            }\r\n                            else{\r\n                                let _option = a.answer.filter((value)=>value ! == option);\r\n                                a={ id:currentQ.id,answer: _option };\r\n                            }\r\n                         }\r\n                         return a;\r\n                     })\r\n                     setAnsList(_ansList)\r\n                     return;\r\n                 }\r\n                if(followingMatch===currentQ.type){\r\n                    const _ansList = ansList.map((a)=>{\r\n                        if(a.id===currentQ.id){\r\n                         const _left = option.split(\"->\")[0];\r\n                         let _options=a.answer.filter( (val)=> !val.startsWith(_left));\r\n                         a={ id:currentQ.id,answer: [..._options,option] };\r\n                        }\r\n                        return a;\r\n\r\n                    })\r\n                    setAnsList(_ansList)\r\n                    return; \r\n\r\n                }\r\n       }\r\n       else{\r\n           setAnsList([...ansList, {id:currentQ.id , answer:[option]}]);\r\n       }\r\n       \r\n    }\r\n    console.log(ansList);\r\n\r\n    const isChecked = (option:string):boolean=>{\r\n         const find = ansList.find((ans)=>ans.id===currentQ.id);\r\n         if(find){\r\n             return !! find.answer.find((val)=>val===option)\r\n         }\r\n         return false\r\n    }\r\n\r\n    const isAnsQuestion =(index:number):boolean=>{\r\n          const find = ansList.find((ans)=>ans.id===index);\r\n          if(find){\r\n            return  find.answer.length >0 ;\r\n          }\r\n          return false\r\n\r\n    }\r\n\r\n    const handleSubmit=()=>{\r\n        let count:number=0;\r\n        ansList.forEach((ans)=>{\r\n            for(let q of questionByLang){\r\n                if(ans.answer.toString()===q.ans.toString()){\r\n                    count++;\r\n                }\r\n                \r\n            }\r\n\r\n        });\r\n        \r\n        history.push(\"/Result\",{ansCount:count , count:questionByLang.length})\r\n\r\n    }\r\n\r\n    return(\r\n     <>\r\n        <Container maxWidth=\"md\" component={Paper} sx ={{minHeight:\"200px\",marginTop:\"40px\",background:\"rgb(176,224,230)\" }}>\r\n          \r\n             \r\n          <Typography align=\"center\" color=\"primary\" variant=\"h6\">{state.lang} Exam</Typography>\r\n\r\n                  <Box sx={{height:\"20px\",width:\"450px\",margin:\"10px auto\"}}>\r\n                     {\r\n                        questionByLang.map((question,index)=>\r\n                          <Button sx={{ background: `${isAnsQuestion(index+1) ? \"red\" : \"gray\"}`, margin:\"10px\"}} key={index}  onClick={()=>getQuestionNo(index)} variant=\"contained\" >{index+1}</Button>\r\n                       )\r\n                     }\r\n                  </Box>\r\n              \r\n                  <Box sx={{marginTop:\"30px \"}}>\r\n                     <Question  currentQ={currentQ} handleOptionPick={handleOptionPick} isChecked={isChecked}  />\r\n                  </Box>\r\n           \r\n                  <Button onClick={handleSubmit} variant=\"contained\" color=\"success\" sx={{margin:\"20px\",width:\"95%\"}}>Submit</Button>\r\n\r\n        \r\n        </Container>\r\n     </>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default Exam;"],"names":["multipleChoice","fillInTheBlank","multiSelect","trueFalse","followingMatch","questionList","id","type","title","options","ans","lang","matchAns","currentQ","handleOptionPick","isChecked","Box","Typography","variant","includes","FormControl","RadioGroup","name","toString","onChange","e","target","value","map","option","index","FormControlLabel","label","control","Radio","checked","Checkbox","Table","TableBody","TableRow","TableCell","op","state","useLocation","history","useHistory","questionByLang","filter","q","useState","questionNo","setQuestionNo","ansList","setAnsList","console","log","isAnsQuestion","find","answer","length","Container","maxWidth","component","Paper","sx","minHeight","marginTop","background","align","color","height","width","margin","question","Button","onClick","getQuestionNo","check","_ansList","a","_option","_left","split","_options","val","startsWith","count","forEach","push","ansCount"],"sourceRoot":""}